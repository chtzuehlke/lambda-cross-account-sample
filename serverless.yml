service: ipc-lambda-consumer

custom:
  invokeRoleArn: ${file(./config.${opt:stage, self:provider.stage, 'dev'}.json):invokeRoleArn}
  functionName: ${file(./config.${opt:stage, self:provider.stage, 'dev'}.json):functionName}
  principalRoleArn: ${file(./config.${opt:stage, self:provider.stage, 'dev'}.json):principalRoleArn}

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: java8
  timeout: 30

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sts:AssumeRole"
      Resource: ${self:custom.invokeRoleArn} 

package:
  artifact: target/hello-dev.jar

functions:
  hello:
    handler: com.serverless.Handler
    environment:
      INVOKE_ROLE: ${self:custom.invokeRoleArn} 
      FUNCTION_NAME: ${self:custom.functionName}

resources:
  Resources:
    LambdaInvokeRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                - ${self:custom.principalRoleArn} 
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: root
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action: 'lambda:InvokeFunction'
                  Resource: !GetAtt HelloLambdaFunction.Arn
  Outputs:
    LambdaName:
      Value: !Ref HelloLambdaFunction
    LambdaInvokeRole:
      Value: !GetAtt LambdaInvokeRole.Arn
    IamRoleLambdaExecution:
      Value: !GetAtt IamRoleLambdaExecution.Arn
